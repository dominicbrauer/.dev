---
import { Image } from "astro:assets";
import DiscIcon from "@lucide/astro/icons/disc";
import MicIcon from "@lucide/astro/icons/mic-vocal";
import PauseIcon from "@lucide/astro/icons/pause";
import { db, SpotifyWebAPICurrentlyPlaying, eq } from "astro:db";
import { SpotifyWebAPI, type SpotifyWebAPICurrentlyPlayingResponse } from "@/lib/spotify/SpotifyWebAPI";
import Timeline from "@/components/Timeline.astro";

const dbEntry = (await db.select().from(SpotifyWebAPICurrentlyPlaying))[0];
const currentUTC = Date.now();

if (currentUTC > dbEntry.fetched_at + 30000) {
	const api = new SpotifyWebAPI(dbEntry.access_token);
	const updatedData = await api.requestCurrentlyPlaying();

	if (updatedData) {
		dbEntry.data = JSON.stringify(updatedData);
		dbEntry.access_token = api.accessToken.value;
	} else {
		const fallbackData: SpotifyWebAPICurrentlyPlayingResponse = JSON.parse(dbEntry.data as string);
		fallbackData.is_playing = false;
		dbEntry.data = JSON.stringify(fallbackData);
	}

	dbEntry.fetched_at = currentUTC;

	await db.update(SpotifyWebAPICurrentlyPlaying).set(dbEntry).where(eq(SpotifyWebAPICurrentlyPlaying.data_id, 0));
}

const data: SpotifyWebAPICurrentlyPlayingResponse = JSON.parse(dbEntry.data as string);
---

{ data?.item &&
<div class="song-display cflex" data-paused={!data.is_playing}>
	<div class="cover-wrapper">
		<PauseIcon stroke-width=1 class="pause-icon" />
		<Image
			class="song-cover"
			src={data?.item.album.images[0].url}
			width={data?.item.album.images[0].width}
			height={data?.item.album.images[0].height}
			alt="The album cover of the currently playing song."
			crossorigin="anonymous"
		/>
		<canvas />
	</div>
	<div class="song-information-wrapper">
		<span class="song-title">
			<a href={data.item.external_urls.spotify} target="_blank">
				{data.item.name}
			</a>
		</span>
		<MicIcon class="mic-svg" />
		<div class="artists-wrapper">
			<span>
				{data.item.artists.map((artist, index) => (
					<>
						<a class="artist" href={artist.external_urls.spotify} target="_blank">
							{artist.name}
						</a>
						{index < data.item.artists.length - 1 && <span> â€¢ </span>}
					</>
				))}
			</span>
		</div>
		<DiscIcon class="disc-svg" />
		<span class="album-title-wrapper">
			<a href={data.item.album.external_urls.spotify} target="_blank">
				{data.item.album.name}
			</a>
		</span>
	</div>
	{data.is_playing && <Timeline data={data} fetchedAt={dbEntry.fetched_at} />}
</div>
}

<style>
	.song-display {
		position: relative;
		border: 1px solid var(--border);
		padding: var(--size-l);
		width: var(--songdisplay-width);
		overflow: hidden;
		gap: var(--size-s);
	}

	.song-information-wrapper {
		display: grid;
		width: 100%;
		grid-template-columns: 24px 1fr;
		gap: var(--size-2xs) var(--size-xs);
	}

	.cover-wrapper {
		position: relative;
	}

	.cover-wrapper canvas {
		display: none;
	}

	.song-cover {
		aspect-ratio: 1 / 1;
		width: 100%;
		height: auto;
		grid-row-start: 1;
	}

	/* .song-display::before {
		content: '';
		position: absolute;
		width: 100%;
		height: 100%;
		background-image: radial-gradient(circle at center, var(--primary), var(--bg) 50%);
		filter: blur(1rem);
		opacity: .5;
		top: -50%;
		left: -50%;
		z-index: -1;
		animation: gradientMovement 8s linear infinite alternate-reverse;
	}

	@keyframes gradientMovement {
		0% {
			top: -50%;
			left: -50%;
		}
		25% {
			top: -50%;
			left: 50%;
		}
		50% {
			top: 50%;
			left: 50%;
		}
		75% {
			top: 50%;
			left: -50%;
		}
		100% {
			top: -50%;
			left: -50%;
		}
	} */

	.song-title {
		font-size: 1.5em;
		font-weight: 500;
		grid-column: span 2;
		margin-bottom: var(--size-3xs);
	}

	.song-title a {
		color: var(--text);
	}

	.mic-svg, .disc-svg {
		grid-column-start: 1;
	}

	.artists-wrapper, .album-title-wrapper {
		display: flex;
		grid-column-start: 2;
		align-items: center;
	}

	.song-information-wrapper svg {
		position: relative;
		aspect-ratio: 1 / 1;
		height: 24px;
		width: auto;
	}

	a {
		text-decoration: none;
	}

	a:hover {
		text-decoration: underline;
	}

	.pause-icon {
		display: none;
		position: absolute;
		aspect-ratio: 1 / 1;
		width: 96px;
		height: auto;
		inset: 0px;
		margin: auto;
		z-index: 100;
		stroke: var(--text);
	}

	.song-display[data-paused="true"] .song-cover {
		filter: grayscale();
	}

	.song-display[data-paused="true"] .song-title {
		color: var(--text-muted);
	}

	.song-display[data-paused="true"] .pause-icon {
		display: initial;
	}
</style>

<script>
	/**
	 * Sets the color for the SongDisplay pause icon
	 * based on the cover colors.
	 */
	function setPauseIconColor() {
		const songCover = document.querySelector<HTMLImageElement>('.song-cover')!;
		const pauseIcon = document.querySelector<SVGElement>('.pause-icon')!;
		const canvas = document.querySelector<HTMLCanvasElement>('.cover-wrapper canvas')!;
		const ctx = canvas.getContext("2d")!;
	
		canvas.width = songCover.width;
		canvas.height = songCover.height;
	
		ctx.drawImage(songCover, 0, 0);
	
		const hue: {
			r: number;
			g: number;
			b: number;
		}[] = []
	
		const start = (canvas.width - 96) / 2;
		const end = start + 96;
		const stepSize = 16;
	
		for (let i = start; i < end; i+=stepSize) {
			for (let j = start; j < end; j+=stepSize) {
				const [r, g, b] = ctx.getImageData(i, j, 1, 1).data;
				hue.push({r, g, b});
			}
		}
	
		const R = hue.reduce((sum, val) => sum + val.r, 0) / hue.length;
		const G = hue.reduce((sum, val) => sum + val.g, 0) / hue.length;
		const B = hue.reduce((sum, val) => sum + val.b, 0) / hue.length;
	
		const grayscale = 0.299 * R + 0.587 * G + 0.114 * B;
		pauseIcon.style.stroke = `hsl(240, 1%, calc(150% - ${Math.round(grayscale / 255 * 100)}%))`;
	}

	setPauseIconColor();
</script>