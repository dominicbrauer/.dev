---
import { Image } from "astro:assets";
import DiscIcon from "@lucide/astro/icons/disc";
import MicIcon from "@lucide/astro/icons/mic-vocal";
import { db, SpotifyWebAPICurrentSong, eq } from "astro:db";
import { SpotifyWebAPI } from "@/lib/spotify/SpotifyWebAPI";
import Timeline from "@/components/Timeline.astro";
import { SpotifyAccessToken } from "@/lib/spotify/SpotifyAccessToken";
import type { SpotifyWebAPIRecentlyPlayedResponse } from "@/lib/spotify/SpotifyWebAPI";
import type { SpotifyWebAPISong } from "@/lib/spotify/SpotifyWebAPI";

const data = (await db.select().from(SpotifyWebAPICurrentSong))[0];
const currentUTC = new Date();

if (currentUTC > new Date(data.fetched_at + 30 * 1000)) {
	const accessToken = new SpotifyAccessToken(data.access_token);

	if (currentUTC > new Date(data.token_fetched_at + 3600 * 1000)) {
		await accessToken.refreshAccessToken();
		data.access_token = accessToken.value;
		data.token_fetched_at = currentUTC.getTime();
	}

	const api = new SpotifyWebAPI(accessToken);
	const currentlyPlayingResponse = await api.requestCurrentlyPlaying();

	let recentlyPlayedResponse: SpotifyWebAPIRecentlyPlayedResponse | undefined;
	if (!currentlyPlayingResponse) {
		recentlyPlayedResponse = await api.requestRecentlyPlayed();
		data.is_playing = false;
	} else {
		data.is_playing = currentlyPlayingResponse.is_playing;
	}

	data.fetched_at = currentUTC.getTime();
	data.song = JSON.stringify(currentlyPlayingResponse?.item) || JSON.stringify(recentlyPlayedResponse?.items[0].track);
	data.progress_ms = currentlyPlayingResponse?.progress_ms || null;

	await db.update(SpotifyWebAPICurrentSong).set(data).where(eq(SpotifyWebAPICurrentSong.id, 0));
}

const song = JSON.parse(data.song as string) as SpotifyWebAPISong;
---

{ data &&
<div class="song-display cflex" data-offline={!data.is_playing}>
	<div class="cover-wrapper">
		<Image
			class="song-cover"
			src={song.album.images[0].url}
			width={song.album.images[0].width}
			height={song.album.images[0].height}
			alt="The album cover of the currently playing song."
			crossorigin="anonymous"
		/>
	</div>
	<div class="song-information-wrapper">
		<span class="song-title">
			<a href={song.external_urls.spotify} target="_blank">
				{song.name}
			</a>
		</span>
		<MicIcon class="mic-svg" />
		<div class="artists-wrapper">
			<span>
				{song.artists.map((artist, index) => (
					<>
						<a class="artist" href={artist.external_urls.spotify} target="_blank">
							{artist.name}
						</a>
						{index < song.artists.length - 1 && <span> â€¢ </span>}
					</>
				))}
			</span>
		</div>
		<DiscIcon class="disc-svg" />
		<span class="album-title-wrapper">
			<a href={song.album.external_urls.spotify} target="_blank">
				{song.album.name}
			</a>
		</span>
	</div>
	{data.is_playing && <Timeline currentProgress={data?.progress_ms} fetchedAt={data.fetched_at} totalDuration={song.duration_ms} />}
</div>
}

<style>
	.song-display {
		position: relative;
		border: 1px solid var(--border);
		padding: var(--size-l);
		width: var(--songdisplay-width);
		overflow: hidden;
		gap: var(--size-s);
	}

	.song-information-wrapper {
		display: grid;
		width: 100%;
		grid-template-columns: 24px 1fr;
		gap: var(--size-2xs) var(--size-xs);
	}

	.cover-wrapper {
		position: relative;
	}

	.cover-wrapper canvas {
		display: none;
	}

	.song-cover {
		aspect-ratio: 1 / 1;
		width: 100%;
		height: auto;
		grid-row-start: 1;
	}

	/* .song-display::before {
		content: '';
		position: absolute;
		width: 100%;
		height: 100%;
		background-image: radial-gradient(circle at center, var(--primary), var(--bg) 50%);
		filter: blur(1rem);
		opacity: .5;
		top: -50%;
		left: -50%;
		z-index: -1;
		animation: gradientMovement 8s linear infinite alternate-reverse;
	}

	@keyframes gradientMovement {
		0% {
			top: -50%;
			left: -50%;
		}
		25% {
			top: -50%;
			left: 50%;
		}
		50% {
			top: 50%;
			left: 50%;
		}
		75% {
			top: 50%;
			left: -50%;
		}
		100% {
			top: -50%;
			left: -50%;
		}
	} */

	.song-title {
		font-size: 1.5em;
		font-weight: 500;
		grid-column: span 2;
		margin-bottom: var(--size-3xs);
	}

	.song-title a {
		color: var(--text);
	}

	.mic-svg, .disc-svg {
		grid-column-start: 1;
	}

	.artists-wrapper, .album-title-wrapper {
		display: flex;
		grid-column-start: 2;
		align-items: center;
	}

	.song-information-wrapper svg {
		position: relative;
		aspect-ratio: 1 / 1;
		height: 24px;
		width: auto;
	}

	a {
		text-decoration: none;
	}

	a:hover {
		text-decoration: underline;
	}

	.pause-icon {
		display: none;
		position: absolute;
		aspect-ratio: 1 / 1;
		width: 96px;
		height: auto;
		inset: 0px;
		margin: auto;
		z-index: 100;
		stroke: var(--text);
	}

	.song-display[data-offline="true"] .song-cover {
		filter: grayscale();
	}

	.song-display[data-offline="true"] .song-title a {
		color: var(--text-muted);
	}

	.song-display[data-offline="true"] .pause-icon {
		display: initial;
	}
</style>