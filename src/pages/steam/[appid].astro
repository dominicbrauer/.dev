---
import { getImage, Image } from "astro:assets";
import Main from "@/layouts/Main.astro";
import { ClockFadingIcon, AwardIcon, TableOfContentsIcon, LayoutGridIcon } from "@lucide/astro/icons";
import { SteamWebAPI } from "@/lib/steam/SteamWebAPI";
import { db, eq, SteamWebAPIPlayerOwnedGames, SteamWebAPIAchievements, SteamWebAPIGameLogoPositioning, SteamWebAPIGameCompleted } from "astro:db";
import Achievement from "@/components/Steam/Achievement.astro";
import SteamworksLogo from "@/assets/icons/steamworks.svg";
import HeaderPlaceholder from "@/assets/images/header-placeholder.png";

const { appid } = Astro.params;

const game = (await db.select().from(SteamWebAPIPlayerOwnedGames).where(eq(SteamWebAPIPlayerOwnedGames.appid, appid!)))[0];
if (!game) return Astro.redirect("/404?error=INVALID_APPID");
const achievements = (await db.select().from(SteamWebAPIAchievements).where(eq(SteamWebAPIAchievements.appid, appid!)));

const steamAPI = new SteamWebAPI();

const isComplete = (await db.select().from(SteamWebAPIGameCompleted).where(eq(SteamWebAPIGameCompleted.appid, game.appid)))[0].complete;
const achievedCount = achievements.filter((achievement) => achievement.achieved).length;
const logoPositioning = (await db.select().from(SteamWebAPIGameLogoPositioning).where(eq(SteamWebAPIGameLogoPositioning.appid, game.appid)))[0];

const headerPlaceholder = await getImage({src: HeaderPlaceholder, format: "webp"});
---

<Main title={game.name}>
	<section class="hero cflex">
		<div class="banner-wrapper">
			<Image
				class="banner"
				src={steamAPI.getGameImage(game.appid, "library_hero")}
				alt=`Game panorama header for ${game.name}.`
				width="1920"
				height="620"
				onerror=`this.src="${headerPlaceholder.src}";`
			/>
			<Image
				class="logo"
				src={steamAPI.getGameImage(game.appid, "logo")}
				alt=`Game logo for ${game.name}.`
				width="640"
				height="160"
				server:defer
				onerror="this.style.display='none';"
				style={
					`top: ${logoPositioning?.y || 50}%;
					left: ${logoPositioning?.x || 50}%;
					transform: translate(-${logoPositioning?.x || 50}%, -${logoPositioning?.y || 50}%);`
				}
			/>
		</div>
		<div class="hero-footer rflex">
			<h1 class="hero-title">{game.name}</h1>
			<div class="game-infos rflex">
				<div class="info-wrapper playtime rflex">
					<ClockFadingIcon />
					<span>{(game.playtime_forever / 60).toFixed(1)} hours</span>
				</div>
				<div class="info-wrapper achievements rflex">
					<AwardIcon class:list={[isComplete && "award-icon-golden"]} />
					<span>{`${achievedCount}/${achievements.length}`} achievements</span>
				</div>
			</div>
		</div>
	</section>
	<section class="achievement-section" data-view="table">
		<div class="heading rflex">
			<h2>Achievements</h2>
			<div class="disclaimer rflex">
				<span>powered by</span>
				<a href="https://partner.steamgames.com/" target="_blank">
					<SteamworksLogo class="steamworks-logo" />
				</a>
			</div>
			<div class="grid-toggle-wrapper rflex" title="Change layout">
				<span>Layout</span>
				<TableOfContentsIcon class="table-icon" />
				<LayoutGridIcon class="grid-icon" />
			</div>
		</div>
		<div class="achievements-wrapper cflex">
			{achievements.length > 0 ? (
				achievements.sort((a, b) => Number(b.achieved) - Number(a.achieved)).map((achievement) => (
					<Achievement achievement={achievement} />
				))
			) : (
				<span>This game has no achievements.</span>
			)}
		</div>
	</section>
</Main>

<style>
	.hero {
		display: flex;
		position: relative;
		max-width: 1200px;
		box-shadow: 
			0px -4px 8px 0px rgba(255, 255, 255, .1),
			inset 0 0 8px 4px rgba(0, 0, 0, .5);
		margin-bottom: var(--size-xl);
		min-width: min-content;
	}

	.banner-wrapper {
		position: relative;
	}

	.banner-wrapper .banner {
		position: relative;
		z-index: -1;
		max-width: 100%;
		height: auto;
	}

	.banner-wrapper .logo {
		position: absolute;
		max-width: clamp(64px, 30vw, 320px);
		height: auto;
		z-index: 2;
	}

	.hero-footer {
		position: absolute;
		bottom: 0;
		max-width: 100%;
		width: 100%;
		background: linear-gradient(0deg, oklch(15% 1% 240 / .5), oklch(21% 1% 240 / .5));
		border-top: 1px solid var(--border-muted);
		z-index: 2;
		-webkit-backdrop-filter: blur(10px);
		backdrop-filter: blur(10px);
		padding: var(--size-xs) var(--size-m);
		justify-content: space-between;
		flex-wrap: wrap;
		min-width: min-content;
		gap: var(--size-s);
	}

	.hero-footer h1 {
		font-size: clamp(1.25em, 6vw, 2em);
		font-weight: 300;
		color: var(--text);
	}

	.hero-footer .game-infos {
		align-items: center;
		flex-wrap: wrap;
		gap: var(--size-xs);
	}

	.hero-footer .game-infos .playtime {
		margin-right: var(--size-m);
	}

	.hero-footer .info-wrapper {
		gap: var(--size-xs);
		align-items: center;
	}

	.hero-footer .info-wrapper span {
		text-wrap: nowrap;
	}

	.award-icon-golden {
		stroke: var(--warning);
	}

	h2 {
		color: var(--text);
	}

	.achievements-wrapper {
		width: 100%;
		gap: var(--size-s);
	}

	.achievement-section[data-view="grid"] .achievements-wrapper {
		flex-direction: row;
		flex-wrap: wrap;
	}

	.achievement-section[data-view="grid"] .achievements-wrapper :global(.achievement) {
		width: fit-content;
		flex-grow: 1;
		p {
			display: none;
		}
		.unlock-time {
			display: none;
		}
	}

	.heading {
		justify-content: space-between;
		align-items: center;
		margin-bottom: var(--size-xl);
		flex-wrap: wrap;
		gap: var(--size-m);
	}

	.disclaimer {
		align-items: flex-end;
		gap: var(--size-s);
	}

	.disclaimer span {
		text-wrap: nowrap;
	}

	.disclaimer a {
		display: flex;
	}

	.disclaimer a:hover .steamworks-logo {
		stroke: var(--text);
		fill: var(--text);
	}

	.steamworks-logo {
		height: 36px;
		width: auto;
		stroke-width: 0;
		fill: var(--text-muted);
		transition: 150ms all ease;
	}

	.grid-toggle-wrapper {
		gap: var(--size-s);
		padding: var(--size-xs);
		border-radius: var(--br-soft);
		align-items: center;
		border: 1px solid var(--border-muted);
		transition: 100ms all ease;
		user-select: none;
	}

	.grid-toggle-wrapper:hover {
		cursor: pointer;
		/* background-color: var(--bg-light); */
		border: 1px solid var(--primary);
		background-color: var(--bg-primary);
	}

	.grid-toggle-wrapper .table-icon {
		display: none;
	}

	.achievement-section[data-view="grid"] .grid-toggle-wrapper .grid-icon {
		display: none;
	}

	.achievement-section[data-view="grid"] .grid-toggle-wrapper .table-icon {
		display: initial !important;
	}

	@media (max-width: 700px) {
		.hero-footer {
			position: relative;
		}
	}
</style>

<script>
	const achievementSection = document.querySelector<HTMLDivElement>('.achievement-section')!;
	const gridToggle = document.querySelector<HTMLDivElement>('.grid-toggle-wrapper');

	gridToggle?.addEventListener('click', () => {
		achievementSection.dataset.view = achievementSection.dataset.view === "table" ? "grid" : "table";
	})
</script>